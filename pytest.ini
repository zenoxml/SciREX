# Copyright (c) 2024 Zenteiq Aitech Innovations Private Limited and 
# AiREX Lab, Indian Institute of Science, Bangalore.
# All rights reserved.
#
# This file is part of SciREX
# (Scientific Research and Engineering eXcellence Platform).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any clarifications or special considerations,
# please contact: <contact@scirex.org>

[pytest]
# Minimum pytest version
minversion = 7.0

# Test discovery and execution
testpaths = 
    tests/src

# Output and reporting settings
addopts =
    # Show extra test summary info
    -ra
    # Verbose output
    -v
    # Show locals in tracebacks
    -l
    # Coverage reporting
    # --cov=src/scirex
    # --cov-report=term-missing
    # --cov-report=html:coverage_html
    # Generate junit-style XML report
    # --junitxml=test-results/junit.xml
    # Number of processes for parallel execution
    # -n auto  # removed it , since there are some tests, which writes to a single file and tests its properties, which creates race condition
    # Show slowest test durations
    --durations=10

# Timeout for individual tests (in seconds)
timeout = 300

# Add your source directory to the Python path
pythonpath = 
    src     	 		 		 # Add src
    src/core/sciml     # Added for FastVPINNs


# Pattern for test file names
python_files = test_*.py *_test.py

# Test class naming pattern
python_classes = Test* *Tests

# Test function naming pattern
python_functions = test_*

# Configuration for numerical testing
# Use these in your tests with pytest.approx()
# e.g., assert result == pytest.approx(expected, rel=RELATIVE_TOLERANCE)
env =
    RELATIVE_TOLERANCE = 1e-6
    ABSOLUTE_TOLERANCE = 1e-8
    NUMPY_TOLERANCE = 1e-7

# Disable warnings from specific packages
filterwarnings =
    # Ignore deprecation warnings from third-party packages
    ignore::DeprecationWarning:numpy.*:
    ignore::DeprecationWarning:scipy.*:
    # But keep our own deprecation warnings
    default::DeprecationWarning:scirex.*:

# Configure logging during tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Directory for temporary test files
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Benchmark configuration
#benchmark_warmup = auto
#benchmark_min_rounds = 100


# Custom pytest settings for scientific computing
required_plugins =
    pytest-cov
    pytest-xdist
    pytest-timeout
    pytest-benchmark
    pytest-env